generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId String    @unique
  username    String    @unique
  email       String    @unique
  bio         String?
  imageUrl    String?
  posts       Post[]
  comments    Comment[]
  likedPosts  Like[]
  following   Follows[] @relation("Following")
  followers   Follows[] @relation("Followers")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Post {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  slug       String    @unique
  content    String
  imageUrl   String?
  published  Boolean   @default(false)
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String    @db.ObjectId
  category   String
  tags       PostTag[]
  comments   Comment[]
  likes      Like[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Tag {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  slug      String    @unique
  posts     PostTag[]
  createdAt DateTime  @default(now())
}

model PostTag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Follows {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  follower    User     @relation(fields: [followerId], references: [id], name: "Followers")
  followerId  String   @db.ObjectId
  following   User     @relation(fields: [followingId], references: [id], name: "Following")
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

